// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `FinancialNews.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package FinancialNews;

public interface FinancialNewsReceiverPrx extends Ice.ObjectPrx
{
    public void interestRate(float rate, Currency curr);

    public void interestRate(float rate, Currency curr, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_interestRate(float rate, Currency curr);

    public Ice.AsyncResult begin_interestRate(float rate, Currency curr, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_interestRate(float rate, Currency curr, Ice.Callback __cb);

    public Ice.AsyncResult begin_interestRate(float rate, Currency curr, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_interestRate(float rate, Currency curr, Callback_FinancialNewsReceiver_interestRate __cb);

    public Ice.AsyncResult begin_interestRate(float rate, Currency curr, java.util.Map<String, String> __ctx, Callback_FinancialNewsReceiver_interestRate __cb);

    public void end_interestRate(Ice.AsyncResult __result);

    public void exchangeRate(float rate, Currency curr1, Currency curr2);

    public void exchangeRate(float rate, Currency curr1, Currency curr2, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_exchangeRate(float rate, Currency curr1, Currency curr2);

    public Ice.AsyncResult begin_exchangeRate(float rate, Currency curr1, Currency curr2, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_exchangeRate(float rate, Currency curr1, Currency curr2, Ice.Callback __cb);

    public Ice.AsyncResult begin_exchangeRate(float rate, Currency curr1, Currency curr2, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_exchangeRate(float rate, Currency curr1, Currency curr2, Callback_FinancialNewsReceiver_exchangeRate __cb);

    public Ice.AsyncResult begin_exchangeRate(float rate, Currency curr1, Currency curr2, java.util.Map<String, String> __ctx, Callback_FinancialNewsReceiver_exchangeRate __cb);

    public void end_exchangeRate(Ice.AsyncResult __result);
}
